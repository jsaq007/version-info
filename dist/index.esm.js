import{execSync as n}from"child_process";import{existsSync as e,readFileSync as t}from"fs";import{join as i}from"path";import{jsx as o,Fragment as r}from"react/jsx-runtime";import{useMemo as s}from"react";const a=(n,e="patch")=>{const t=(n.startsWith("v")?n.slice(1):n).split(".").map(Number);if(3!==t.length)return n;switch(e){case"major":t[0]+=1,t[1]=0,t[2]=0;break;case"minor":t[1]+=1,t[2]=0;break;default:t[2]+=1}return`${n.startsWith("v")?"v":""}${t.join(".")}`},c=n=>{try{if(void 0!==import.meta&&import.meta.env&&n in import.meta.env){const e=import.meta.env[n];if(null!=e)return String(e)}}catch{}const e=[()=>globalThis.import?.meta?.env?.[n],()=>globalThis.__VITE_ENV__?.[n],()=>globalThis.VITE_ENV?.[n],()=>process.env?.[n],()=>window?.__ENV__?.[n]];for(let n=0;n<e.length;n++)try{const t=e[n]();if(t)return t}catch{}},m=n=>{if(!n)return;const e=parseInt(n,10);if(isNaN(e))return;return(e<1e10?new Date(1e3*e):new Date(e)).toISOString()},p=(n,e=7)=>n?n.slice(0,e):void 0,h=()=>({commitHash:"",shortHash:"",branch:""}),v=()=>({version:"0.0.0",name:"unknown"}),u=()=>"unknown",d=()=>{let n="development";try{void 0!==import.meta&&import.meta.env?.MODE?n=import.meta.env.MODE:"undefined"!=typeof process&&process.env?.NODE_ENV?n=process.env.NODE_ENV:"undefined"!=typeof window&&window.__ENV__?.NODE_ENV&&(n=window.__ENV__.NODE_ENV)}catch{}return{nodeEnv:n,isProduction:"production"===n,isDevelopment:"development"===n,isTest:"test"===n,buildTime:Date.now()}},l=n=>{const e={version:"0.0.0",name:"unknown"},t={commitHash:"",shortHash:"",branch:""},i=d(),o=n?.productionVersion||c("VITE_VERSION"),r=n?.environment||c("VITE_APP_ENV")||i.nodeEnv,s=n?.packageVersion||c("VITE_PACKAGE_VERSION")||c("npm_package_version")||e.version,p=n?.commitHash||c("VITE_COMMIT_HASH")||c("GITHUB_SHA")||t.commitHash,h=n?.buildTime||m(c("VITE_BUILD_TIME"))||i.buildTime.toString(),v=r||"development";let u="v0.0.0",l=o||`v${e.version}`,E=s||e.version;const _=l.startsWith("v")?l.slice(1):l;return u="production"===v?l:E!==_?a(l):l,{version:u,buildTime:h,commitHash:p,environment:v,packageVersion:s,branch:t.branch,shortHash:t.shortHash,tag:t.tag}},E=(n,e)=>{const{showEnvironment:t=!0,showCommitHash:i=!0,showBuildTime:o=!1,showBranch:r=!1,showTag:s=!1}=e||{};let a=n.version.startsWith("v")?n.version:`v${n.version}`;if("production"===n.environment)return a;if(t&&n.environment&&"production"!==n.environment&&(a+=` (${n.environment})`),i&&n.commitHash&&(a+=` #${p(n.commitHash)}`),r&&n.branch&&"main"!==n.branch&&"master"!==n.branch&&(a+=` [${n.branch}]`),s&&n.tag&&(a+=` ${n.tag}`),o&&n.buildTime){a+=` @${new Date(n.buildTime).toISOString().split("T")[0]}`}return a},_=n=>e=>E(e,n),g=()=>{try{const e=n("git rev-parse HEAD",{encoding:"utf8"}).trim(),t=e.slice(0,7),i=n("git rev-parse --abbrev-ref HEAD",{encoding:"utf8"}).trim();let o;try{o=n("git describe --tags --exact-match",{encoding:"utf8"}).trim()}catch{}return{commitHash:e,shortHash:t,branch:i,tag:o}}catch(n){return{commitHash:"",shortHash:"",branch:""}}},f=()=>{try{const n=i(process.cwd(),"package.json");if(!e(n))throw new Error("package.json not found");const o=JSON.parse(t(n,"utf8"));return{version:o.version||"0.0.0",name:o.name||"unknown"}}catch(n){return{version:"0.0.0",name:"unknown"}}},T=()=>{const n=process.env.NODE_ENV||"development";return{nodeEnv:n,isProduction:"production"===n,isDevelopment:"development"===n,isTest:"test"===n,buildTime:Date.now()}};function V(n={}){return{name:"version-info",config(e,{command:t}){const i=f(),o=g(),r=T(),s=n.packageVersion||i.version,c=n.productionVersion||`v${s}`,m=n.environment||r.nodeEnv,p=n.commitHash||(!1!==n.includeGitInfo?o.commitHash:""),h=n.buildTime||(!1!==n.includeBuildTime?r.buildTime.toString():"");let v=c;"production"!==m&&(v=a(c));const u={"import.meta.env.VITE_VERSION":JSON.stringify(v),"import.meta.env.VITE_PACKAGE_VERSION":JSON.stringify(s),"import.meta.env.VITE_APP_ENV":JSON.stringify(m)};return p&&(u["import.meta.env.VITE_COMMIT_HASH"]=JSON.stringify(p),u["import.meta.env.VITE_SHORT_HASH"]=JSON.stringify(o.shortHash)),h&&(u["import.meta.env.VITE_BUILD_TIME"]=JSON.stringify(h)),o.branch&&(u["import.meta.env.VITE_BRANCH"]=JSON.stringify(o.branch)),o.tag&&(u["import.meta.env.VITE_TAG"]=JSON.stringify(o.tag)),{define:{...e.define,...u}}}}}class N{constructor(n={}){this.options=n}apply(n){let e;try{e=require("webpack")}catch(n){throw new Error("Webpack is required for VersionInfoWebpackPlugin. Please install webpack as a dependency.")}const t=f(),i=g(),o=T(),r=this.options.packageVersion||t.version,s=this.options.productionVersion||`v${r}`,c=this.options.environment||o.nodeEnv,m=this.options.commitHash||(!1!==this.options.includeGitInfo?i.commitHash:""),p=this.options.buildTime||(!1!==this.options.includeBuildTime?o.buildTime.toString():"");let h=s;"production"!==c&&(h=a(s));new e.DefinePlugin({"process.env.VITE_VERSION":JSON.stringify(h),"process.env.VITE_PACKAGE_VERSION":JSON.stringify(r),"process.env.VITE_APP_ENV":JSON.stringify(c),...m&&{"process.env.VITE_COMMIT_HASH":JSON.stringify(m),"process.env.VITE_SHORT_HASH":JSON.stringify(i.shortHash)},...p&&{"process.env.VITE_BUILD_TIME":JSON.stringify(p)},...i.branch&&{"process.env.VITE_BRANCH":JSON.stringify(i.branch)},...i.tag&&{"process.env.VITE_TAG":JSON.stringify(i.tag)}}).apply(n)}}const I=n=>s(()=>l(n),[n?.productionVersion,n?.packageVersion,n?.environment,n?.commitHash,n?.buildTime]),H=n=>{const e=I(n);return s(()=>E(e,n),[e,n?.showEnvironment,n?.showCommitHash,n?.showBuildTime])};function b({className:n=""}){const e=l();return o("span",{className:n,children:E(e)})}const S=({className:n="",children:e,...t})=>{const i=I(t),s=H(t);return e?o(r,{children:e(s,i)}):o("span",{className:n,"data-testid":"version-display",children:s})};export{b as VersionDisplay,S as VersionDisplayAdvanced,N as VersionInfoWebpackPlugin,_ as createVersionFormatter,l as default,u as detectBuildSystem,E as formatVersion,c as getEnvVar,d as getEnvironmentInfo,h as getGitInfo,v as getPackageInfo,p as getShortCommitHash,l as getVersionInfo,a as incrementVersion,m as parseBuildTime,H as useVersionDisplay,I as useVersionInfo,V as versionInfoPlugin};
//# sourceMappingURL=index.esm.js.map
