import{execSync as t}from"child_process";import{existsSync as n,readFileSync as i}from"fs";import{join as e}from"path";import{jsx as r,Fragment as o}from"react/jsx-runtime";import{useMemo as s}from"react";const c=(t,n="patch")=>{const i=(t.startsWith("v")?t.slice(1):t).split(".").map(Number);if(3!==i.length)return t;switch(n){case"major":i[0]+=1,i[1]=0,i[2]=0;break;case"minor":i[1]+=1,i[2]=0;break;default:i[2]+=1}return`${t.startsWith("v")?"v":""}${i.join(".")}`},a=t=>{try{if(void 0!==import.meta&&import.meta.env&&t in import.meta.env){const n=import.meta.env[t];if(null!=n)return String(n)}}catch{}const n=[()=>globalThis.import?.meta?.env?.[t],()=>globalThis.__VITE_ENV__?.[t],()=>globalThis.VITE_ENV?.[t],()=>process.env?.[t],()=>window?.__ENV__?.[t]];for(let t=0;t<n.length;t++)try{const i=n[t]();if(i)return i}catch{}},m=t=>{if(!t)return;const n=parseInt(t,10);if(isNaN(n))return;return(n<1e10?new Date(1e3*n):new Date(n)).toISOString()},p=(t,n=7)=>t?t.slice(0,n):void 0,h=()=>{try{const n=t("git rev-parse HEAD",{encoding:"utf8"}).trim(),i=n.slice(0,7),e=t("git rev-parse --abbrev-ref HEAD",{encoding:"utf8"}).trim();let r;try{r=t("git describe --tags --exact-match",{encoding:"utf8"}).trim()}catch{}return{commitHash:n,shortHash:i,branch:e,tag:r}}catch(t){return{commitHash:"",shortHash:"",branch:""}}},u=()=>{try{const t=e(process.cwd(),"package.json");if(!n(t))throw new Error("package.json not found");const r=JSON.parse(i(t,"utf8"));return{version:r.version||"0.0.0",name:r.name||"unknown"}}catch(t){return{version:"0.0.0",name:"unknown"}}},l=()=>{const t=["vite.config.js","vite.config.ts","vite.config.mjs","webpack.config.js","webpack.config.ts","webpack.config.mjs","rollup.config.js","rollup.config.ts","rollup.config.mjs","parcel.config.js","parcel.config.ts","parcel.config.mjs"];for(const i of t)if(n(e(process.cwd(),i))){if(i.startsWith("vite"))return"vite";if(i.startsWith("webpack"))return"webpack";if(i.startsWith("rollup"))return"rollup";if(i.startsWith("parcel"))return"parcel"}return"unknown"},v=()=>{const t=process.env.NODE_ENV||"development";return{nodeEnv:t,isProduction:"production"===t,isDevelopment:"development"===t,isTest:"test"===t,buildTime:Date.now()}},f=t=>{const n=u(),i=h(),e=v(),r=t?.productionVersion||a("VITE_VERSION"),o=t?.environment||a("VITE_APP_ENV")||e.nodeEnv,s=t?.packageVersion||a("VITE_PACKAGE_VERSION")||a("npm_package_version")||n.version,p=t?.commitHash||a("VITE_COMMIT_HASH")||a("GITHUB_SHA")||i.commitHash,l=t?.buildTime||m(a("VITE_BUILD_TIME"))||e.buildTime.toString(),f=o||"development";let g="v0.0.0",d=r||`v${n.version}`,T=s||n.version;const E=d.startsWith("v")?d.slice(1):d;return g="production"===f?d:T!==E?c(d):d,{version:g,buildTime:l,commitHash:p,environment:f,packageVersion:s,branch:i.branch,shortHash:i.shortHash,tag:i.tag}},g=(t,n)=>{const{showEnvironment:i=!0,showCommitHash:e=!0,showBuildTime:r=!1,showBranch:o=!1,showTag:s=!1}=n||{};let c=t.version.startsWith("v")?t.version:`v${t.version}`;if("production"===t.environment)return c;if(i&&t.environment&&"production"!==t.environment&&(c+=` (${t.environment})`),e&&t.commitHash&&(c+=` #${p(t.commitHash)}`),o&&t.branch&&"main"!==t.branch&&"master"!==t.branch&&(c+=` [${t.branch}]`),s&&t.tag&&(c+=` ${t.tag}`),r&&t.buildTime){c+=` @${new Date(t.buildTime).toISOString().split("T")[0]}`}return c},d=t=>n=>g(n,t);function T(t={}){return{name:"version-info",config(n,{command:i}){const e=u(),r=h(),o=v(),s=t.packageVersion||e.version,c=t.productionVersion||`v${s}`,a=t.environment||o.nodeEnv,m=t.commitHash||(!1!==t.includeGitInfo?r.commitHash:""),p=t.buildTime||(!1!==t.includeBuildTime?o.buildTime.toString():"");let l=c;if("production"!==a){const{incrementVersion:t}=require("./utils");l=t(c)}const f={"import.meta.env.VITE_VERSION":JSON.stringify(l),"import.meta.env.VITE_PACKAGE_VERSION":JSON.stringify(s),"import.meta.env.VITE_APP_ENV":JSON.stringify(a)};return m&&(f["import.meta.env.VITE_COMMIT_HASH"]=JSON.stringify(m),f["import.meta.env.VITE_SHORT_HASH"]=JSON.stringify(r.shortHash)),p&&(f["import.meta.env.VITE_BUILD_TIME"]=JSON.stringify(p)),r.branch&&(f["import.meta.env.VITE_BRANCH"]=JSON.stringify(r.branch)),r.tag&&(f["import.meta.env.VITE_TAG"]=JSON.stringify(r.tag)),{define:{...n.define,...f}}}}}class E{constructor(t={}){this.options=t}apply(t){const n=u(),i=h(),e=v(),r=this.options.packageVersion||n.version,o=this.options.productionVersion||`v${r}`,s=this.options.environment||e.nodeEnv,c=this.options.commitHash||(!1!==this.options.includeGitInfo?i.commitHash:""),a=this.options.buildTime||(!1!==this.options.includeBuildTime?e.buildTime.toString():"");let m=o;if("production"!==s){const{incrementVersion:t}=require("./utils");m=t(o)}new(require("webpack").DefinePlugin)({"process.env.VITE_VERSION":JSON.stringify(m),"process.env.VITE_PACKAGE_VERSION":JSON.stringify(r),"process.env.VITE_APP_ENV":JSON.stringify(s),...c&&{"process.env.VITE_COMMIT_HASH":JSON.stringify(c),"process.env.VITE_SHORT_HASH":JSON.stringify(i.shortHash)},...a&&{"process.env.VITE_BUILD_TIME":JSON.stringify(a)},...i.branch&&{"process.env.VITE_BRANCH":JSON.stringify(i.branch)},...i.tag&&{"process.env.VITE_TAG":JSON.stringify(i.tag)}}).apply(t)}}const _=t=>s(()=>f(t),[t?.productionVersion,t?.packageVersion,t?.environment,t?.commitHash,t?.buildTime]),V=t=>{const n=_(t);return s(()=>g(n,t),[n,t?.showEnvironment,t?.showCommitHash,t?.showBuildTime])};function I({className:t=""}){const n=f();return r("span",{className:t,children:g(n)})}const N=({className:t="",children:n,...i})=>{const e=_(i),s=V(i);return n?r(o,{children:n(s,e)}):r("span",{className:t,"data-testid":"version-display",children:s})};export{I as VersionDisplay,N as VersionDisplayAdvanced,E as VersionInfoWebpackPlugin,d as createVersionFormatter,f as default,l as detectBuildSystem,g as formatVersion,a as getEnvVar,v as getEnvironmentInfo,h as getGitInfo,u as getPackageInfo,p as getShortCommitHash,f as getVersionInfo,c as incrementVersion,m as parseBuildTime,V as useVersionDisplay,_ as useVersionInfo,T as versionInfoPlugin};
//# sourceMappingURL=index.esm.js.map
