import{execSync as n}from"child_process";import{existsSync as t,readFileSync as e}from"fs";import{join as i}from"path";import{jsx as r,Fragment as o}from"react/jsx-runtime";import{useMemo as s}from"react";const c=(n,t="patch")=>{const e=(n.startsWith("v")?n.slice(1):n).split(".").map(Number);if(3!==e.length)return n;switch(t){case"major":e[0]+=1,e[1]=0,e[2]=0;break;case"minor":e[1]+=1,e[2]=0;break;default:e[2]+=1}return`${n.startsWith("v")?"v":""}${e.join(".")}`},a=n=>{try{if(void 0!==import.meta&&import.meta.env&&n in import.meta.env){const t=import.meta.env[n];if(null!=t)return String(t)}}catch{}const t=[()=>globalThis.import?.meta?.env?.[n],()=>globalThis.__VITE_ENV__?.[n],()=>globalThis.VITE_ENV?.[n],()=>process.env?.[n],()=>window?.__ENV__?.[n]];for(let n=0;n<t.length;n++)try{const e=t[n]();if(e)return e}catch{}},m=n=>{if(!n)return;const t=parseInt(n,10);if(isNaN(t))return;return(t<1e10?new Date(1e3*t):new Date(t)).toISOString()},p=(n,t=7)=>n?n.slice(0,t):void 0,h=()=>{try{const t=n("git rev-parse HEAD",{encoding:"utf8"}).trim(),e=t.slice(0,7),i=n("git rev-parse --abbrev-ref HEAD",{encoding:"utf8"}).trim();let r;try{r=n("git describe --tags --exact-match",{encoding:"utf8"}).trim()}catch{}return{commitHash:t,shortHash:e,branch:i,tag:r}}catch(n){return{commitHash:"",shortHash:"",branch:""}}},l=()=>{try{const n=i(process.cwd(),"package.json");if(!t(n))throw new Error("package.json not found");const r=JSON.parse(e(n,"utf8"));return{version:r.version||"0.0.0",name:r.name||"unknown"}}catch(n){return{version:"0.0.0",name:"unknown"}}},u=()=>{const n=["vite.config.js","vite.config.ts","vite.config.mjs","webpack.config.js","webpack.config.ts","webpack.config.mjs","rollup.config.js","rollup.config.ts","rollup.config.mjs","parcel.config.js","parcel.config.ts","parcel.config.mjs"];for(const e of n)if(t(i(process.cwd(),e))){if(e.startsWith("vite"))return"vite";if(e.startsWith("webpack"))return"webpack";if(e.startsWith("rollup"))return"rollup";if(e.startsWith("parcel"))return"parcel"}return"unknown"},v=()=>{const n=process.env.NODE_ENV||"development";return{nodeEnv:n,isProduction:"production"===n,isDevelopment:"development"===n,isTest:"test"===n,buildTime:Date.now()}},f=n=>{const t=l(),e=h(),i=v(),r=n?.productionVersion||a("VITE_VERSION"),o=n?.environment||a("VITE_APP_ENV")||i.nodeEnv,s=n?.packageVersion||a("VITE_PACKAGE_VERSION")||a("npm_package_version")||t.version,p=n?.commitHash||a("VITE_COMMIT_HASH")||a("GITHUB_SHA")||e.commitHash,u=n?.buildTime||m(a("VITE_BUILD_TIME"))||i.buildTime.toString(),f=o||"development";let g="v0.0.0",d=r||`v${t.version}`,T=s||t.version;const E=d.startsWith("v")?d.slice(1):d;return g="production"===f?d:T!==E?c(d):d,{version:g,buildTime:u,commitHash:p,environment:f,packageVersion:s,branch:e.branch,shortHash:e.shortHash,tag:e.tag}},g=(n,t)=>{const{showEnvironment:e=!0,showCommitHash:i=!0,showBuildTime:r=!1,showBranch:o=!1,showTag:s=!1}=t||{};let c=n.version.startsWith("v")?n.version:`v${n.version}`;if("production"===n.environment)return c;if(e&&n.environment&&"production"!==n.environment&&(c+=` (${n.environment})`),i&&n.commitHash&&(c+=` #${p(n.commitHash)}`),o&&n.branch&&"main"!==n.branch&&"master"!==n.branch&&(c+=` [${n.branch}]`),s&&n.tag&&(c+=` ${n.tag}`),r&&n.buildTime){c+=` @${new Date(n.buildTime).toISOString().split("T")[0]}`}return c},d=n=>t=>g(t,n);function T(n={}){return{name:"version-info",config(t,{command:e}){const i=l(),r=h(),o=v(),s=n.packageVersion||i.version,a=n.productionVersion||`v${s}`,m=n.environment||o.nodeEnv,p=n.commitHash||(!1!==n.includeGitInfo?r.commitHash:""),u=n.buildTime||(!1!==n.includeBuildTime?o.buildTime.toString():"");let f=a;"production"!==m&&(f=c(a));const g={"import.meta.env.VITE_VERSION":JSON.stringify(f),"import.meta.env.VITE_PACKAGE_VERSION":JSON.stringify(s),"import.meta.env.VITE_APP_ENV":JSON.stringify(m)};return p&&(g["import.meta.env.VITE_COMMIT_HASH"]=JSON.stringify(p),g["import.meta.env.VITE_SHORT_HASH"]=JSON.stringify(r.shortHash)),u&&(g["import.meta.env.VITE_BUILD_TIME"]=JSON.stringify(u)),r.branch&&(g["import.meta.env.VITE_BRANCH"]=JSON.stringify(r.branch)),r.tag&&(g["import.meta.env.VITE_TAG"]=JSON.stringify(r.tag)),{define:{...t.define,...g}}}}}class E{constructor(n={}){this.options=n}apply(n){let t;try{t=require("webpack")}catch(n){throw new Error("Webpack is required for VersionInfoWebpackPlugin. Please install webpack as a dependency.")}const e=l(),i=h(),r=v(),o=this.options.packageVersion||e.version,s=this.options.productionVersion||`v${o}`,c=this.options.environment||r.nodeEnv,a=this.options.commitHash||(!1!==this.options.includeGitInfo?i.commitHash:""),m=this.options.buildTime||(!1!==this.options.includeBuildTime?r.buildTime.toString():"");let p=s;if("production"!==c){const{incrementVersion:n}=require("./utils");p=n(s)}new t.DefinePlugin({"process.env.VITE_VERSION":JSON.stringify(p),"process.env.VITE_PACKAGE_VERSION":JSON.stringify(o),"process.env.VITE_APP_ENV":JSON.stringify(c),...a&&{"process.env.VITE_COMMIT_HASH":JSON.stringify(a),"process.env.VITE_SHORT_HASH":JSON.stringify(i.shortHash)},...m&&{"process.env.VITE_BUILD_TIME":JSON.stringify(m)},...i.branch&&{"process.env.VITE_BRANCH":JSON.stringify(i.branch)},...i.tag&&{"process.env.VITE_TAG":JSON.stringify(i.tag)}}).apply(n)}}const _=n=>s(()=>f(n),[n?.productionVersion,n?.packageVersion,n?.environment,n?.commitHash,n?.buildTime]),V=n=>{const t=_(n);return s(()=>g(t,n),[t,n?.showEnvironment,n?.showCommitHash,n?.showBuildTime])};function I({className:n=""}){const t=f();return r("span",{className:n,children:g(t)})}const b=({className:n="",children:t,...e})=>{const i=_(e),s=V(e);return t?r(o,{children:t(s,i)}):r("span",{className:n,"data-testid":"version-display",children:s})};export{I as VersionDisplay,b as VersionDisplayAdvanced,E as VersionInfoWebpackPlugin,d as createVersionFormatter,f as default,u as detectBuildSystem,g as formatVersion,a as getEnvVar,v as getEnvironmentInfo,h as getGitInfo,l as getPackageInfo,p as getShortCommitHash,f as getVersionInfo,c as incrementVersion,m as parseBuildTime,V as useVersionDisplay,_ as useVersionInfo,T as versionInfoPlugin};
//# sourceMappingURL=index.esm.js.map
