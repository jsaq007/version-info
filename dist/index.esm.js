import{jsx as n,Fragment as e}from"react/jsx-runtime";import{useMemo as t}from"react";const o=(n,e="patch")=>{const t=(n.startsWith("v")?n.slice(1):n).split(".").map(Number);if(3!==t.length)return n;switch(e){case"major":t[0]+=1,t[1]=0,t[2]=0;break;case"minor":t[1]+=1,t[2]=0;break;default:t[2]+=1}return`${n.startsWith("v")?"v":""}${t.join(".")}`},i=n=>{try{if(void 0!==import.meta&&import.meta.env&&n in import.meta.env){const e=import.meta.env[n];if(null!=e)return String(e)}}catch{}const e=[()=>globalThis.import?.meta?.env?.[n],()=>globalThis.__VITE_ENV__?.[n],()=>globalThis.VITE_ENV?.[n],()=>process.env?.[n],()=>window?.__ENV__?.[n]];for(let n=0;n<e.length;n++)try{const t=e[n]();if(t)return t}catch{}},r=n=>{if(!n)return;const e=parseInt(n,10);if(isNaN(e))return;return(e<1e10?new Date(1e3*e):new Date(e)).toISOString()},s=(n,e=7)=>n?n.slice(0,e):void 0,a=()=>({commitHash:"",shortHash:"",branch:""}),m=()=>({version:"0.0.0",name:"unknown"}),c=()=>"unknown",h=()=>{let n="development";try{void 0!==import.meta&&import.meta.env?.MODE?n=import.meta.env.MODE:"undefined"!=typeof process&&process.env?.NODE_ENV?n=process.env.NODE_ENV:"undefined"!=typeof window&&window.__ENV__?.NODE_ENV&&(n=window.__ENV__.NODE_ENV)}catch{}return{nodeEnv:n,isProduction:"production"===n,isDevelopment:"development"===n,isTest:"test"===n,buildTime:Date.now()}},v=n=>{const e={version:"0.0.0",name:"unknown"},t={commitHash:"",shortHash:"",branch:""},s=h(),a=n?.productionVersion||i("VITE_VERSION"),m=n?.environment||i("VITE_APP_ENV")||s.nodeEnv,c=n?.packageVersion||i("VITE_PACKAGE_VERSION")||i("npm_package_version")||e.version,v=n?.commitHash||i("VITE_COMMIT_HASH")||i("GITHUB_SHA")||t.commitHash,l=n?.buildTime||r(i("VITE_BUILD_TIME"))||s.buildTime.toString(),d=m||"development";let u="v0.0.0",p=a||`v${e.version}`,_=c||e.version;const E=p.startsWith("v")?p.slice(1):p;return u="production"===d?p:_!==E?o(p):p,{version:u,buildTime:l,commitHash:v,environment:d,packageVersion:c,branch:t.branch,shortHash:t.shortHash,tag:t.tag}},l=(n,e)=>{const{showEnvironment:t=!0,showCommitHash:o=!0,showBuildTime:i=!1,showBranch:r=!1,showTag:a=!1}=e||{};let m=n.version.startsWith("v")?n.version:`v${n.version}`;if("production"===n.environment)return m;if(t&&n.environment&&"production"!==n.environment&&(m+=` (${n.environment})`),o&&n.commitHash&&(m+=` #${s(n.commitHash)}`),r&&n.branch&&"main"!==n.branch&&"master"!==n.branch&&(m+=` [${n.branch}]`),a&&n.tag&&(m+=` ${n.tag}`),i&&n.buildTime){m+=` @${new Date(n.buildTime).toISOString().split("T")[0]}`}return m},d=n=>e=>l(e,n),u=n=>t(()=>v(n),[n?.productionVersion,n?.packageVersion,n?.environment,n?.commitHash,n?.buildTime]),p=n=>{const e=u(n);return t(()=>l(e,n),[e,n?.showEnvironment,n?.showCommitHash,n?.showBuildTime])};function _({className:e=""}){const t=v();return n("span",{className:e,children:l(t)})}const E=({className:t="",children:o,...i})=>{const r=u(i),s=p(i);return o?n(e,{children:o(s,r)}):n("span",{className:t,"data-testid":"version-display",children:s})};export{_ as VersionDisplay,E as VersionDisplayAdvanced,d as createVersionFormatter,v as default,c as detectBuildSystem,l as formatVersion,i as getEnvVar,h as getEnvironmentInfo,a as getGitInfo,m as getPackageInfo,s as getShortCommitHash,v as getVersionInfo,o as incrementVersion,r as parseBuildTime,p as useVersionDisplay,u as useVersionInfo};
//# sourceMappingURL=index.esm.js.map
