import{execSync as t}from"child_process";import{existsSync as n,readFileSync as e}from"fs";import{join as i}from"path";import{jsx as r,Fragment as o}from"react/jsx-runtime";import{useMemo as s}from"react";const c=(t,n="patch")=>{const e=(t.startsWith("v")?t.slice(1):t).split(".").map(Number);if(3!==e.length)return t;switch(n){case"major":e[0]+=1,e[1]=0,e[2]=0;break;case"minor":e[1]+=1,e[2]=0;break;default:e[2]+=1}return`${t.startsWith("v")?"v":""}${e.join(".")}`},a=t=>{try{if(void 0!==import.meta&&import.meta.env&&t in import.meta.env){const n=import.meta.env[t];if(null!=n)return String(n)}}catch{}const n=[()=>globalThis.import?.meta?.env?.[t],()=>globalThis.__VITE_ENV__?.[t],()=>globalThis.VITE_ENV?.[t],()=>process.env?.[t],()=>window?.__ENV__?.[t]];for(let t=0;t<n.length;t++)try{const e=n[t]();if(e)return e}catch{}},m=t=>{if(!t)return;const n=parseInt(t,10);if(isNaN(n))return;return(n<1e10?new Date(1e3*n):new Date(n)).toISOString()},p=(t,n=7)=>t?t.slice(0,n):void 0,h=()=>{try{const n=t("git rev-parse HEAD",{encoding:"utf8"}).trim(),e=n.slice(0,7),i=t("git rev-parse --abbrev-ref HEAD",{encoding:"utf8"}).trim();let r;try{r=t("git describe --tags --exact-match",{encoding:"utf8"}).trim()}catch{}return{commitHash:n,shortHash:e,branch:i,tag:r}}catch(t){return{commitHash:"",shortHash:"",branch:""}}},l=()=>{try{const t=i(process.cwd(),"package.json");if(!n(t))throw new Error("package.json not found");const r=JSON.parse(e(t,"utf8"));return{version:r.version||"0.0.0",name:r.name||"unknown"}}catch(t){return{version:"0.0.0",name:"unknown"}}},u=()=>{const t=["vite.config.js","vite.config.ts","vite.config.mjs","webpack.config.js","webpack.config.ts","webpack.config.mjs","rollup.config.js","rollup.config.ts","rollup.config.mjs","parcel.config.js","parcel.config.ts","parcel.config.mjs"];for(const e of t)if(n(i(process.cwd(),e))){if(e.startsWith("vite"))return"vite";if(e.startsWith("webpack"))return"webpack";if(e.startsWith("rollup"))return"rollup";if(e.startsWith("parcel"))return"parcel"}return"unknown"},v=()=>{const t=process.env.NODE_ENV||"development";return{nodeEnv:t,isProduction:"production"===t,isDevelopment:"development"===t,isTest:"test"===t,buildTime:Date.now()}},f=t=>{const n=l(),e=h(),i=v(),r=t?.productionVersion||a("VITE_VERSION"),o=t?.environment||a("VITE_APP_ENV")||i.nodeEnv,s=t?.packageVersion||a("VITE_PACKAGE_VERSION")||a("npm_package_version")||n.version,p=t?.commitHash||a("VITE_COMMIT_HASH")||a("GITHUB_SHA")||e.commitHash,u=t?.buildTime||m(a("VITE_BUILD_TIME"))||i.buildTime.toString(),f=o||"development";let g="v0.0.0",d=r||`v${n.version}`,T=s||n.version;const E=d.startsWith("v")?d.slice(1):d;return g="production"===f?d:T!==E?c(d):d,{version:g,buildTime:u,commitHash:p,environment:f,packageVersion:s,branch:e.branch,shortHash:e.shortHash,tag:e.tag}},g=(t,n)=>{const{showEnvironment:e=!0,showCommitHash:i=!0,showBuildTime:r=!1,showBranch:o=!1,showTag:s=!1}=n||{};let c=t.version.startsWith("v")?t.version:`v${t.version}`;if("production"===t.environment)return c;if(e&&t.environment&&"production"!==t.environment&&(c+=` (${t.environment})`),i&&t.commitHash&&(c+=` #${p(t.commitHash)}`),o&&t.branch&&"main"!==t.branch&&"master"!==t.branch&&(c+=` [${t.branch}]`),s&&t.tag&&(c+=` ${t.tag}`),r&&t.buildTime){c+=` @${new Date(t.buildTime).toISOString().split("T")[0]}`}return c},d=t=>n=>g(n,t);function T(t={}){return{name:"version-info",config(n,{command:e}){const i=l(),r=h(),o=v(),s=t.packageVersion||i.version,a=t.productionVersion||`v${s}`,m=t.environment||o.nodeEnv,p=t.commitHash||(!1!==t.includeGitInfo?r.commitHash:""),u=t.buildTime||(!1!==t.includeBuildTime?o.buildTime.toString():"");let f=a;"production"!==m&&(f=c(a));const g={"import.meta.env.VITE_VERSION":JSON.stringify(f),"import.meta.env.VITE_PACKAGE_VERSION":JSON.stringify(s),"import.meta.env.VITE_APP_ENV":JSON.stringify(m)};return p&&(g["import.meta.env.VITE_COMMIT_HASH"]=JSON.stringify(p),g["import.meta.env.VITE_SHORT_HASH"]=JSON.stringify(r.shortHash)),u&&(g["import.meta.env.VITE_BUILD_TIME"]=JSON.stringify(u)),r.branch&&(g["import.meta.env.VITE_BRANCH"]=JSON.stringify(r.branch)),r.tag&&(g["import.meta.env.VITE_TAG"]=JSON.stringify(r.tag)),{define:{...n.define,...g}}}}}class E{constructor(t={}){this.options=t}apply(t){let n;try{n=require("webpack")}catch(t){throw new Error("Webpack is required for VersionInfoWebpackPlugin. Please install webpack as a dependency.")}const e=l(),i=h(),r=v(),o=this.options.packageVersion||e.version,s=this.options.productionVersion||`v${o}`,a=this.options.environment||r.nodeEnv,m=this.options.commitHash||(!1!==this.options.includeGitInfo?i.commitHash:""),p=this.options.buildTime||(!1!==this.options.includeBuildTime?r.buildTime.toString():"");let u=s;"production"!==a&&(u=c(s));new n.DefinePlugin({"process.env.VITE_VERSION":JSON.stringify(u),"process.env.VITE_PACKAGE_VERSION":JSON.stringify(o),"process.env.VITE_APP_ENV":JSON.stringify(a),...m&&{"process.env.VITE_COMMIT_HASH":JSON.stringify(m),"process.env.VITE_SHORT_HASH":JSON.stringify(i.shortHash)},...p&&{"process.env.VITE_BUILD_TIME":JSON.stringify(p)},...i.branch&&{"process.env.VITE_BRANCH":JSON.stringify(i.branch)},...i.tag&&{"process.env.VITE_TAG":JSON.stringify(i.tag)}}).apply(t)}}const _=t=>s(()=>f(t),[t?.productionVersion,t?.packageVersion,t?.environment,t?.commitHash,t?.buildTime]),V=t=>{const n=_(t);return s(()=>g(n,t),[n,t?.showEnvironment,t?.showCommitHash,t?.showBuildTime])};function I({className:t=""}){const n=f();return r("span",{className:t,children:g(n)})}const b=({className:t="",children:n,...e})=>{const i=_(e),s=V(e);return n?r(o,{children:n(s,i)}):r("span",{className:t,"data-testid":"version-display",children:s})};export{I as VersionDisplay,b as VersionDisplayAdvanced,E as VersionInfoWebpackPlugin,d as createVersionFormatter,f as default,u as detectBuildSystem,g as formatVersion,a as getEnvVar,v as getEnvironmentInfo,h as getGitInfo,l as getPackageInfo,p as getShortCommitHash,f as getVersionInfo,c as incrementVersion,m as parseBuildTime,V as useVersionDisplay,_ as useVersionInfo,T as versionInfoPlugin};
//# sourceMappingURL=index.esm.js.map
