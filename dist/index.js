"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("child_process"),n=require("fs"),t=require("path"),i=require("react/jsx-runtime"),r=require("react"),o="undefined"!=typeof document?document.currentScript:null;const s=(e,n="patch")=>{const t=(e.startsWith("v")?e.slice(1):e).split(".").map(Number);if(3!==t.length)return e;switch(n){case"major":t[0]+=1,t[1]=0,t[2]=0;break;case"minor":t[1]+=1,t[2]=0;break;default:t[2]+=1}return`${e.startsWith("v")?"v":""}${t.join(".")}`},c=e=>{try{"undefined"==typeof document?require("url").pathToFileURL(__filename).href:o&&"SCRIPT"===o.tagName.toUpperCase()&&o.src||new URL("index.js",document.baseURI).href,0}catch{}const n=[()=>globalThis.import?.meta?.env?.[e],()=>globalThis.__VITE_ENV__?.[e],()=>globalThis.VITE_ENV?.[e],()=>process.env?.[e],()=>window?.__ENV__?.[e]];for(let e=0;e<n.length;e++)try{const t=n[e]();if(t)return t}catch{}},a=e=>{if(!e)return;const n=parseInt(e,10);if(isNaN(n))return;return(n<1e10?new Date(1e3*n):new Date(n)).toISOString()},p=(e,n=7)=>e?e.slice(0,n):void 0,m=()=>{try{const n=e.execSync("git rev-parse HEAD",{encoding:"utf8"}).trim(),t=n.slice(0,7),i=e.execSync("git rev-parse --abbrev-ref HEAD",{encoding:"utf8"}).trim();let r;try{r=e.execSync("git describe --tags --exact-match",{encoding:"utf8"}).trim()}catch{}return{commitHash:n,shortHash:t,branch:i,tag:r}}catch(e){return{commitHash:"",shortHash:"",branch:""}}},u=()=>{try{const e=t.join(process.cwd(),"package.json");if(!n.existsSync(e))throw new Error("package.json not found");const i=JSON.parse(n.readFileSync(e,"utf8"));return{version:i.version||"0.0.0",name:i.name||"unknown"}}catch(e){return{version:"0.0.0",name:"unknown"}}},l=()=>{const e=process.env.NODE_ENV||"development";return{nodeEnv:e,isProduction:"production"===e,isDevelopment:"development"===e,isTest:"test"===e,buildTime:Date.now()}},h=e=>{const n=u(),t=m(),i=l(),r=e?.productionVersion||c("VITE_VERSION"),o=e?.environment||c("VITE_APP_ENV")||i.nodeEnv,p=e?.packageVersion||c("VITE_PACKAGE_VERSION")||c("npm_package_version")||n.version,h=e?.commitHash||c("VITE_COMMIT_HASH")||c("GITHUB_SHA")||t.commitHash,d=e?.buildTime||a(c("VITE_BUILD_TIME"))||i.buildTime.toString(),f=o||"development";let v="v0.0.0",g=r||`v${n.version}`,T=p||n.version;const V=g.startsWith("v")?g.slice(1):g;return v="production"===f?g:T!==V?s(g):g,{version:v,buildTime:d,commitHash:h,environment:f,packageVersion:p,branch:t.branch,shortHash:t.shortHash,tag:t.tag}},d=(e,n)=>{const{showEnvironment:t=!0,showCommitHash:i=!0,showBuildTime:r=!1,showBranch:o=!1,showTag:s=!1}=n||{};let c=e.version.startsWith("v")?e.version:`v${e.version}`;if("production"===e.environment)return c;if(t&&e.environment&&"production"!==e.environment&&(c+=` (${e.environment})`),i&&e.commitHash&&(c+=` #${p(e.commitHash)}`),o&&e.branch&&"main"!==e.branch&&"master"!==e.branch&&(c+=` [${e.branch}]`),s&&e.tag&&(c+=` ${e.tag}`),r&&e.buildTime){c+=` @${new Date(e.buildTime).toISOString().split("T")[0]}`}return c};const f=e=>r.useMemo(()=>h(e),[e?.productionVersion,e?.packageVersion,e?.environment,e?.commitHash,e?.buildTime]),v=e=>{const n=f(e);return r.useMemo(()=>d(n,e),[n,e?.showEnvironment,e?.showCommitHash,e?.showBuildTime])};exports.VersionDisplay=function({className:e=""}){const n=h();return i.jsx("span",{className:e,children:d(n)})},exports.VersionDisplayAdvanced=({className:e="",children:n,...t})=>{const r=f(t),o=v(t);return n?i.jsx(i.Fragment,{children:n(o,r)}):i.jsx("span",{className:e,"data-testid":"version-display",children:o})},exports.VersionInfoWebpackPlugin=class{constructor(e={}){this.options=e}apply(e){let n;try{n=require("webpack")}catch(e){throw new Error("Webpack is required for VersionInfoWebpackPlugin. Please install webpack as a dependency.")}const t=u(),i=m(),r=l(),o=this.options.packageVersion||t.version,c=this.options.productionVersion||`v${o}`,a=this.options.environment||r.nodeEnv,p=this.options.commitHash||(!1!==this.options.includeGitInfo?i.commitHash:""),h=this.options.buildTime||(!1!==this.options.includeBuildTime?r.buildTime.toString():"");let d=c;"production"!==a&&(d=s(c));new n.DefinePlugin({"process.env.VITE_VERSION":JSON.stringify(d),"process.env.VITE_PACKAGE_VERSION":JSON.stringify(o),"process.env.VITE_APP_ENV":JSON.stringify(a),...p&&{"process.env.VITE_COMMIT_HASH":JSON.stringify(p),"process.env.VITE_SHORT_HASH":JSON.stringify(i.shortHash)},...h&&{"process.env.VITE_BUILD_TIME":JSON.stringify(h)},...i.branch&&{"process.env.VITE_BRANCH":JSON.stringify(i.branch)},...i.tag&&{"process.env.VITE_TAG":JSON.stringify(i.tag)}}).apply(e)}},exports.createVersionFormatter=e=>n=>d(n,e),exports.default=h,exports.detectBuildSystem=()=>{const e=["vite.config.js","vite.config.ts","vite.config.mjs","webpack.config.js","webpack.config.ts","webpack.config.mjs","rollup.config.js","rollup.config.ts","rollup.config.mjs","parcel.config.js","parcel.config.ts","parcel.config.mjs"];for(const i of e)if(n.existsSync(t.join(process.cwd(),i))){if(i.startsWith("vite"))return"vite";if(i.startsWith("webpack"))return"webpack";if(i.startsWith("rollup"))return"rollup";if(i.startsWith("parcel"))return"parcel"}return"unknown"},exports.formatVersion=d,exports.getEnvVar=c,exports.getEnvironmentInfo=l,exports.getGitInfo=m,exports.getPackageInfo=u,exports.getShortCommitHash=p,exports.getVersionInfo=h,exports.incrementVersion=s,exports.parseBuildTime=a,exports.useVersionDisplay=v,exports.useVersionInfo=f,exports.versionInfoPlugin=function(e={}){return{name:"version-info",config(n,{command:t}){const i=u(),r=m(),o=l(),c=e.packageVersion||i.version,a=e.productionVersion||`v${c}`,p=e.environment||o.nodeEnv,h=e.commitHash||(!1!==e.includeGitInfo?r.commitHash:""),d=e.buildTime||(!1!==e.includeBuildTime?o.buildTime.toString():"");let f=a;"production"!==p&&(f=s(a));const v={"import.meta.env.VITE_VERSION":JSON.stringify(f),"import.meta.env.VITE_PACKAGE_VERSION":JSON.stringify(c),"import.meta.env.VITE_APP_ENV":JSON.stringify(p)};return h&&(v["import.meta.env.VITE_COMMIT_HASH"]=JSON.stringify(h),v["import.meta.env.VITE_SHORT_HASH"]=JSON.stringify(r.shortHash)),d&&(v["import.meta.env.VITE_BUILD_TIME"]=JSON.stringify(d)),r.branch&&(v["import.meta.env.VITE_BRANCH"]=JSON.stringify(r.branch)),r.tag&&(v["import.meta.env.VITE_TAG"]=JSON.stringify(r.tag)),{define:{...n.define,...v}}}}};
//# sourceMappingURL=index.js.map
