"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("child_process"),n=require("fs"),t=require("path"),r=require("react/jsx-runtime"),i=require("react"),o="undefined"!=typeof document?document.currentScript:null;const s=(e,n="patch")=>{const t=(e.startsWith("v")?e.slice(1):e).split(".").map(Number);if(3!==t.length)return e;switch(n){case"major":t[0]+=1,t[1]=0,t[2]=0;break;case"minor":t[1]+=1,t[2]=0;break;default:t[2]+=1}return`${e.startsWith("v")?"v":""}${t.join(".")}`},a=e=>{try{"undefined"==typeof document?require("url").pathToFileURL(__filename).href:o&&"SCRIPT"===o.tagName.toUpperCase()&&o.src||new URL("index.js",document.baseURI).href,0}catch{}const n=[()=>globalThis.import?.meta?.env?.[e],()=>globalThis.__VITE_ENV__?.[e],()=>globalThis.VITE_ENV?.[e],()=>process.env?.[e],()=>window?.__ENV__?.[e]];for(let e=0;e<n.length;e++)try{const t=n[e]();if(t)return t}catch{}},c=e=>{if(!e)return;const n=parseInt(e,10);if(isNaN(n))return;return(n<1e10?new Date(1e3*n):new Date(n)).toISOString()},m=(e,n=7)=>e?e.slice(0,n):void 0,p=()=>({commitHash:"",shortHash:"",branch:""}),u=()=>({version:"0.0.0",name:"unknown"}),h=()=>{let e="development";try{"undefined"==typeof document?require("url").pathToFileURL(__filename).href:o&&"SCRIPT"===o.tagName.toUpperCase()&&o.src||new URL("index.js",document.baseURI).href,"undefined"!=typeof process&&process.env?.NODE_ENV?e=process.env.NODE_ENV:"undefined"!=typeof window&&window.__ENV__?.NODE_ENV&&(e=window.__ENV__.NODE_ENV)}catch{}return{nodeEnv:e,isProduction:"production"===e,isDevelopment:"development"===e,isTest:"test"===e,buildTime:Date.now()}},d=e=>{const n={version:"0.0.0",name:"unknown"},t={commitHash:"",shortHash:"",branch:""},r=h(),i=e?.productionVersion||a("VITE_VERSION"),o=e?.environment||a("VITE_APP_ENV")||r.nodeEnv,m=e?.packageVersion||a("VITE_PACKAGE_VERSION")||a("npm_package_version")||n.version,p=e?.commitHash||a("VITE_COMMIT_HASH")||a("GITHUB_SHA")||t.commitHash,u=e?.buildTime||c(a("VITE_BUILD_TIME"))||r.buildTime.toString(),d=o||"development";let l="v0.0.0",v=i||`v${n.version}`,f=m||n.version;const _=v.startsWith("v")?v.slice(1):v;return l="production"===d?v:f!==_?s(v):v,{version:l,buildTime:u,commitHash:p,environment:d,packageVersion:m,branch:t.branch,shortHash:t.shortHash,tag:t.tag}},l=(e,n)=>{const{showEnvironment:t=!0,showCommitHash:r=!0,showBuildTime:i=!1,showBranch:o=!1,showTag:s=!1}=n||{};let a=e.version.startsWith("v")?e.version:`v${e.version}`;if("production"===e.environment)return a;if(t&&e.environment&&"production"!==e.environment&&(a+=` (${e.environment})`),r&&e.commitHash&&(a+=` #${m(e.commitHash)}`),o&&e.branch&&"main"!==e.branch&&"master"!==e.branch&&(a+=` [${e.branch}]`),s&&e.tag&&(a+=` ${e.tag}`),i&&e.buildTime){a+=` @${new Date(e.buildTime).toISOString().split("T")[0]}`}return a},v=()=>{try{const n=e.execSync("git rev-parse HEAD",{encoding:"utf8"}).trim(),t=n.slice(0,7),r=e.execSync("git rev-parse --abbrev-ref HEAD",{encoding:"utf8"}).trim();let i;try{i=e.execSync("git describe --tags --exact-match",{encoding:"utf8"}).trim()}catch{}return{commitHash:n,shortHash:t,branch:r,tag:i}}catch(e){return{commitHash:"",shortHash:"",branch:""}}},f=()=>{try{const e=t.join(process.cwd(),"package.json");if(!n.existsSync(e))throw new Error("package.json not found");const r=JSON.parse(n.readFileSync(e,"utf8"));return{version:r.version||"0.0.0",name:r.name||"unknown"}}catch(e){return{version:"0.0.0",name:"unknown"}}},_=()=>{const e=process.env.NODE_ENV||"development";return{nodeEnv:e,isProduction:"production"===e,isDevelopment:"development"===e,isTest:"test"===e,buildTime:Date.now()}};const g=e=>i.useMemo(()=>d(e),[e?.productionVersion,e?.packageVersion,e?.environment,e?.commitHash,e?.buildTime]),E=e=>{const n=g(e);return i.useMemo(()=>l(n,e),[n,e?.showEnvironment,e?.showCommitHash,e?.showBuildTime])};exports.VersionDisplay=function({className:e=""}){const n=d();return r.jsx("span",{className:e,children:l(n)})},exports.VersionDisplayAdvanced=({className:e="",children:n,...t})=>{const i=g(t),o=E(t);return n?r.jsx(r.Fragment,{children:n(o,i)}):r.jsx("span",{className:e,"data-testid":"version-display",children:o})},exports.VersionInfoWebpackPlugin=class{constructor(e={}){this.options=e}apply(e){let n;try{n=require("webpack")}catch(e){throw new Error("Webpack is required for VersionInfoWebpackPlugin. Please install webpack as a dependency.")}const t=f(),r=v(),i=_(),o=this.options.packageVersion||t.version,a=this.options.productionVersion||`v${o}`,c=this.options.environment||i.nodeEnv,m=this.options.commitHash||(!1!==this.options.includeGitInfo?r.commitHash:""),p=this.options.buildTime||(!1!==this.options.includeBuildTime?i.buildTime.toString():"");let u=a;"production"!==c&&(u=s(a));new n.DefinePlugin({"process.env.VITE_VERSION":JSON.stringify(u),"process.env.VITE_PACKAGE_VERSION":JSON.stringify(o),"process.env.VITE_APP_ENV":JSON.stringify(c),...m&&{"process.env.VITE_COMMIT_HASH":JSON.stringify(m),"process.env.VITE_SHORT_HASH":JSON.stringify(r.shortHash)},...p&&{"process.env.VITE_BUILD_TIME":JSON.stringify(p)},...r.branch&&{"process.env.VITE_BRANCH":JSON.stringify(r.branch)},...r.tag&&{"process.env.VITE_TAG":JSON.stringify(r.tag)}}).apply(e)}},exports.createVersionFormatter=e=>n=>l(n,e),exports.default=d,exports.detectBuildSystem=()=>"unknown",exports.formatVersion=l,exports.getEnvVar=a,exports.getEnvironmentInfo=h,exports.getGitInfo=p,exports.getPackageInfo=u,exports.getShortCommitHash=m,exports.getVersionInfo=d,exports.incrementVersion=s,exports.parseBuildTime=c,exports.useVersionDisplay=E,exports.useVersionInfo=g,exports.versionInfoPlugin=function(e={}){return{name:"version-info",config(n,{command:t}){const r=f(),i=v(),o=_(),a=e.packageVersion||r.version,c=e.productionVersion||`v${a}`,m=e.environment||o.nodeEnv,p=e.commitHash||(!1!==e.includeGitInfo?i.commitHash:""),u=e.buildTime||(!1!==e.includeBuildTime?o.buildTime.toString():"");let h=c;"production"!==m&&(h=s(c));const d={"import.meta.env.VITE_VERSION":JSON.stringify(h),"import.meta.env.VITE_PACKAGE_VERSION":JSON.stringify(a),"import.meta.env.VITE_APP_ENV":JSON.stringify(m)};return p&&(d["import.meta.env.VITE_COMMIT_HASH"]=JSON.stringify(p),d["import.meta.env.VITE_SHORT_HASH"]=JSON.stringify(i.shortHash)),u&&(d["import.meta.env.VITE_BUILD_TIME"]=JSON.stringify(u)),i.branch&&(d["import.meta.env.VITE_BRANCH"]=JSON.stringify(i.branch)),i.tag&&(d["import.meta.env.VITE_TAG"]=JSON.stringify(i.tag)),{define:{...n.define,...d}}}}};
//# sourceMappingURL=index.js.map
