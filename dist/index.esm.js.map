{"version":3,"file":"index.esm.js","sources":["../src/utils.ts","../src/client.ts","../src/core.ts","../src/react.tsx"],"sourcesContent":["import type { VersionInfo, VersionConfig } from './types';\n\n/**\n * Increment version number by patch, minor, or major\n */\nexport const incrementVersion = (version: string, type: 'patch' | 'minor' | 'major' = 'patch'): string => {\n  const cleanVersion = version.startsWith('v') ? version.slice(1) : version;\n  const parts = cleanVersion.split('.').map(Number);\n\n  if (parts.length !== 3) {\n    return version;\n  }\n\n  switch (type) {\n    case 'major':\n      parts[0] += 1;\n      parts[1] = 0;\n      parts[2] = 0;\n      break;\n    case 'minor':\n      parts[1] += 1;\n      parts[2] = 0;\n      break;\n    case 'patch':\n    default:\n      parts[2] += 1;\n      break;\n  }\n\n  const prefix = version.startsWith('v') ? 'v' : '';\n  return `${prefix}${parts.join('.')}`;\n};\n\n/**\n * Get environment variables from different sources\n */\nexport const getEnvVar = (key: string): string | undefined => {\n  // Try Vite environment variables first (import.meta.env)\n  try {\n    if (typeof import.meta !== 'undefined' && import.meta.env && key in import.meta.env) {\n      const value = (import.meta.env as any)[key];\n      if (value !== undefined && value !== null) {\n        return String(value);\n      }\n    }\n  } catch {\n    // Ignore errors if import.meta is not available\n  }\n\n  // Try other possible sources for backward compatibility\n  const possibleSources = [\n    () => (globalThis as any).import?.meta?.env?.[key],\n    () => (globalThis as any).__VITE_ENV__?.[key],\n    () => (globalThis as any).VITE_ENV?.[key],\n    () => process.env?.[key],\n    () => (window as any)?.__ENV__?.[key],\n  ];\n\n  for (let i = 0; i < possibleSources.length; i++) {\n    try {\n      const value = possibleSources[i]();\n      if (value) {\n        return value;\n      }\n    } catch {\n      // Ignore errors\n    }\n  }\n\n  return undefined;\n};\n\n/**\n * Parse build time from timestamp\n */\nexport const parseBuildTime = (timestamp?: string): string | undefined => {\n  if (!timestamp) return undefined;\n\n  const time = parseInt(timestamp, 10);\n  if (isNaN(time)) return undefined;\n\n  // Handle both seconds and milliseconds\n  const date = time < 10000000000 ? new Date(time * 1000) : new Date(time);\n  return date.toISOString();\n};\n\n/**\n * Get short commit hash\n */\nexport const getShortCommitHash = (hash?: string, length: number = 7): string | undefined => {\n  return hash ? hash.slice(0, length) : undefined;\n}; ","import type { GitInfo, PackageInfo, BuildSystem } from './types';\n\n/**\n * Client-safe version of getGitInfo\n * Returns empty values since Git info is only available at build time\n */\nexport const getGitInfo = (): GitInfo => {\n  return { commitHash: '', shortHash: '', branch: '' };\n};\n\n/**\n * Client-safe version of getPackageInfo\n * Returns default values since package.json is only available at build time\n */\nexport const getPackageInfo = (): PackageInfo => {\n  return { version: '0.0.0', name: 'unknown' };\n};\n\n/**\n * Client-safe version of detectBuildSystem\n * Returns 'unknown' since build system detection is only available at build time\n */\nexport const detectBuildSystem = (): BuildSystem => {\n  return 'unknown';\n};\n\n/**\n * Client-safe version of getEnvironmentInfo\n * Uses browser-safe APIs to get environment information\n */\nexport const getEnvironmentInfo = () => {\n  // Try to get NODE_ENV from various sources\n  let nodeEnv = 'development';\n\n  try {\n    // Try import.meta.env first (Vite)\n    if (typeof import.meta !== 'undefined' && import.meta.env?.MODE) {\n      nodeEnv = import.meta.env.MODE;\n    }\n    // Try process.env (if available in browser)\n    else if (typeof process !== 'undefined' && process.env?.NODE_ENV) {\n      nodeEnv = process.env.NODE_ENV;\n    }\n    // Try window.__ENV__ (custom env)\n    else if (typeof window !== 'undefined' && (window as any).__ENV__?.NODE_ENV) {\n      nodeEnv = (window as any).__ENV__.NODE_ENV;\n    }\n  } catch {\n    // Fallback to development\n  }\n\n  const isProduction = nodeEnv === 'production';\n  const isDevelopment = nodeEnv === 'development';\n  const isTest = nodeEnv === 'test';\n\n  return {\n    nodeEnv,\n    isProduction,\n    isDevelopment,\n    isTest,\n    buildTime: Date.now()\n  };\n}; ","import type { VersionInfo, VersionConfig, Environment } from './types';\nimport { incrementVersion, getEnvVar, parseBuildTime, getShortCommitHash } from './utils';\nimport { getGitInfo, getPackageInfo, getEnvironmentInfo } from './client';\n\n/**\n * Get version information from environment variables and configuration\n * Now with automatic package.json and Git detection\n */\nexport const getVersionInfo = (config?: Partial<VersionConfig>): VersionInfo => {\n  // Auto-detect package.json and Git information\n  const packageInfo = getPackageInfo();\n  const gitInfo = getGitInfo();\n  const envInfo = getEnvironmentInfo();\n\n  // Read from Vite environment variables with improved fallbacks\n  const viteVersion = config?.productionVersion || getEnvVar('VITE_VERSION');\n  const viteAppEnv = config?.environment || getEnvVar('VITE_APP_ENV') || envInfo.nodeEnv;\n  const vitePackageVersion = config?.packageVersion || getEnvVar('VITE_PACKAGE_VERSION') || getEnvVar('npm_package_version') || packageInfo.version;\n  const viteCommitHash = config?.commitHash || getEnvVar('VITE_COMMIT_HASH') || getEnvVar('GITHUB_SHA') || gitInfo.commitHash;\n  const viteBuildTime = config?.buildTime || parseBuildTime(getEnvVar('VITE_BUILD_TIME')) || envInfo.buildTime.toString();\n\n  // Determine the environment\n  const environment = viteAppEnv || 'development';\n\n  // Determine the version with better defaults\n  let version = 'v0.0.0';\n  let productionVersion = viteVersion || `v${packageInfo.version}`;\n  let packageVersion = vitePackageVersion || packageInfo.version;\n\n  // Clean production version for comparison\n  const productionVersionClean = productionVersion.startsWith('v')\n    ? productionVersion.slice(1)\n    : productionVersion;\n\n  if (environment === 'production') {\n    version = productionVersion;\n  } else {\n    if (packageVersion !== productionVersionClean) {\n      // We're ahead of production, show next version\n      version = incrementVersion(productionVersion);\n    } else {\n      // We're at the same level as production, mirror production version\n      version = productionVersion;\n    }\n  }\n\n  return {\n    version,\n    buildTime: viteBuildTime,\n    commitHash: viteCommitHash,\n    environment,\n    packageVersion: vitePackageVersion,\n    branch: gitInfo.branch,\n    shortHash: gitInfo.shortHash,\n    tag: gitInfo.tag,\n  };\n};\n\n/**\n * Determine the appropriate version for each environment\n */\nconst getEnvironmentVersion = (\n  productionVersion: string,\n  packageVersion: string,\n  environment: Environment\n): string => {\n  // For production, always use the exact version from git tag\n  if (environment === 'production') {\n    return productionVersion;\n  }\n\n  // For other environments, determine if we're ahead of production\n  const productionVersionClean = productionVersion.startsWith('v')\n    ? productionVersion.slice(1)\n    : productionVersion;\n\n  // If package.json version is different from production, we're ahead\n  if (packageVersion !== productionVersionClean) {\n    // We're ahead of production, show next version\n    return incrementVersion(productionVersion);\n  } else {\n    // We're at the same level as production, mirror production version\n    return productionVersion;\n  }\n};\n\n/**\n * Format version for display with configurable options\n */\nexport const formatVersion = (\n  info: VersionInfo,\n  config?: Partial<VersionConfig>\n): string => {\n  const {\n    showEnvironment = true,\n    showCommitHash = true,\n    showBuildTime = false,\n    showBranch = false,\n    showTag = false,\n  } = config || {};\n\n  // Only add 'v' if not already present\n  let displayText = info.version.startsWith('v') ? info.version : `v${info.version}`;\n\n  // For production, only show the version number (clean and simple)\n  if (info.environment === 'production') {\n    return displayText;\n  }\n\n  // For non-production environments, show additional info based on config\n  if (showEnvironment && info.environment && info.environment !== 'production') {\n    displayText += ` (${info.environment})`;\n  }\n\n  if (showCommitHash && info.commitHash) {\n    displayText += ` #${getShortCommitHash(info.commitHash)}`;\n  }\n\n  if (showBranch && info.branch && info.branch !== 'main' && info.branch !== 'master') {\n    displayText += ` [${info.branch}]`;\n  }\n\n  if (showTag && info.tag) {\n    displayText += ` ${info.tag}`;\n  }\n\n  if (showBuildTime && info.buildTime) {\n    const date = new Date(info.buildTime);\n    displayText += ` @${date.toISOString().split('T')[0]}`;\n  }\n\n  return displayText;\n};\n\n/**\n * Create a custom version formatter\n */\nexport const createVersionFormatter = (config: Partial<VersionConfig>) => {\n  return (info: VersionInfo) => formatVersion(info, config);\n}; ","import React, { useMemo } from 'react';\nimport type { VersionInfo, VersionConfig } from './types';\nimport { getVersionInfo, formatVersion } from './core';\n\n/**\n * React hook to get version information\n */\nexport const useVersionInfo = (config?: Partial<VersionConfig>): VersionInfo => {\n  return useMemo(() => getVersionInfo(config), [\n    config?.productionVersion,\n    config?.packageVersion,\n    config?.environment,\n    config?.commitHash,\n    config?.buildTime,\n  ]);\n};\n\n/**\n * React hook to get formatted version string\n */\nexport const useVersionDisplay = (config?: Partial<VersionConfig>): string => {\n  const versionInfo = useVersionInfo(config);\n\n  return useMemo(() => formatVersion(versionInfo, config), [\n    versionInfo,\n    config?.showEnvironment,\n    config?.showCommitHash,\n    config?.showBuildTime,\n  ]);\n};\n\n/**\n * Simple React component to display version information (matches version-fix.tsx)\n */\nexport function VersionDisplay({ className = '' }: { className?: string }) {\n  const versionInfo = getVersionInfo();\n\n  return <span className={className}>{formatVersion(versionInfo)}</span>;\n}\n\n/**\n * Advanced React component to display version information with full configuration\n */\nexport interface VersionDisplayProps extends Partial<VersionConfig> {\n  className?: string;\n  children?: (version: string, info: VersionInfo) => React.ReactNode;\n}\n\nexport const VersionDisplayAdvanced: React.FC<VersionDisplayProps> = ({\n  className = '',\n  children,\n  ...config\n}) => {\n  const versionInfo = useVersionInfo(config);\n  const versionDisplay = useVersionDisplay(config);\n\n  if (children) {\n    return <>{children(versionDisplay, versionInfo)}</>;\n  }\n\n  return (\n    <span className={className} data-testid=\"version-display\">\n      {versionDisplay}\n    </span>\n  );\n}; "],"names":["incrementVersion","version","type","parts","startsWith","slice","split","map","Number","length","join","getEnvVar","key","env","value","String","possibleSources","globalThis","import","meta","__VITE_ENV__","VITE_ENV","process","window","__ENV__","i","parseBuildTime","timestamp","time","parseInt","isNaN","Date","toISOString","getShortCommitHash","hash","undefined","getGitInfo","commitHash","shortHash","branch","getPackageInfo","name","detectBuildSystem","getEnvironmentInfo","nodeEnv","MODE","NODE_ENV","isProduction","isDevelopment","isTest","buildTime","now","getVersionInfo","config","packageInfo","gitInfo","envInfo","viteVersion","productionVersion","viteAppEnv","environment","vitePackageVersion","packageVersion","viteCommitHash","viteBuildTime","toString","productionVersionClean","tag","formatVersion","info","showEnvironment","showCommitHash","showBuildTime","showBranch","showTag","displayText","createVersionFormatter","useVersionInfo","useMemo","useVersionDisplay","versionInfo","VersionDisplay","className","_jsx","children","VersionDisplayAdvanced","versionDisplay","_Fragment"],"mappings":"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"}